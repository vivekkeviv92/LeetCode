package com.coding.practice;

/*
EASY
LAME TRICKS
1332. Remove Palindromic Subsequences

Given a string s consisting only of letters 'a' and 'b'. In a single step you can remove one palindromic subsequence from s.

Return the minimum number of steps to make the given string empty.

A string is a subsequence of a given string, if it is generated by deleting some characters of a given string without changing its order.

A string is called palindrome if is one that reads the same backward as well as forward.



Example 1:

Input: s = "ababa"
Output: 1
Explanation: String is already palindrome
Example 2:

Input: s = "abb"
Output: 2
Explanation: "abb" -> "bb" -> "".
Remove palindromic subsequence "a" then "bb".
Example 3:

Input: s = "baabb"
Output: 2
Explanation: "baabb" -> "b" -> "".
Remove palindromic subsequence "baab" then "b".
Example 4:

Input: s = ""
Output: 0


Constraints:

0 <= s.length <= 1000
s only consists of letters 'a' and 'b'
*/

public class LeetCode_1332 {
    public boolean isPalin(String s) {
        int i = 0;
        int j = s.length() - 1;
        while (i <= j) {
            if (s.charAt(i++) != s.charAt(j--)) {
                return false;
            }
        }
        return true;
    }

    public int removePalindromeSub(String s) {
        if (s == null || s.length() == 0) {
            return 0;
        }

        if (s.length() == 1 || isPalin(s)) {
            return 1;
        }
        return 2;
    }
}
/*
Quick Explanation:
Notice there are 2 very important information (hints):
1. Remove the subsequence (not substring!).
2. The input string only consists of letters 'a' and 'b'!
That means, there are 3 situations of this problem:
#1. String length equals 0 -> return 0;
#2. String itself is a Palindrome -> return 1; (because you can remove them all at once)
#3. Other cases, you can first remove all 'a' and then all 'b' or vice versa (first all 'b' then all 'a') -> return 2;
*/

